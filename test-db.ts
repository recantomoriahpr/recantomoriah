/**
 * Script de Teste de Conex√£o com Banco de Dados
 * Verifica se o Drizzle ORM est√° configurado corretamente
 */

import { testConnection, db } from './src/db';
import { sql } from 'drizzle-orm';

console.log('üîç Testando conex√£o com banco de dados...\n');

async function main() {
  try {
    // Teste 1: Conex√£o b√°sica
    console.log('üì° Teste 1: Verificando conex√£o...');
    const isConnected = await testConnection();
    
    if (!isConnected) {
      throw new Error('Falha ao conectar ao banco de dados');
    }

    // Teste 2: Query simples
    console.log('üìä Teste 2: Executando query de teste...');
    const result = await db.execute(sql`SELECT NOW() as current_time, version() as pg_version`);
    
    if (result.rows && result.rows.length > 0) {
      const row = result.rows[0] as { current_time: Date; pg_version: string };
      console.log('   ‚è∞ Hora do servidor:', row.current_time);
      console.log('   üêò PostgreSQL vers√£o:', row.pg_version.split(' ')[0]);
    }

    // Teste 3: Listar tabelas
    console.log('\nüìã Teste 3: Verificando tabelas criadas...');
    const tables = await db.execute(sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
        AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);

    if (tables.rows && tables.rows.length > 0) {
      console.log(`   ‚úÖ ${tables.rows.length} tabelas encontradas:`);
      tables.rows.forEach((row: any) => {
        console.log(`      - ${row.table_name}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è  Nenhuma tabela encontrada. Execute o SQL de migra√ß√£o primeiro!');
    }

    // Teste 4: Verificar RLS
    console.log('\nüîê Teste 4: Verificando Row Level Security...');
    const rlsTables = await db.execute(sql`
      SELECT tablename, rowsecurity 
      FROM pg_tables 
      WHERE schemaname = 'public' 
        AND rowsecurity = true
      ORDER BY tablename
    `);

    if (rlsTables.rows && rlsTables.rows.length > 0) {
      console.log(`   ‚úÖ RLS ativado em ${rlsTables.rows.length} tabelas:`);
      rlsTables.rows.forEach((row: any) => {
        console.log(`      - ${row.tablename}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è  RLS n√£o configurado. Execute o SQL de migra√ß√£o!');
    }

    console.log('\n‚úÖ TODOS OS TESTES PASSARAM!\n');
    console.log('üéâ Seu banco de dados est√° configurado corretamente.');
    console.log('üìù Pr√≥ximos passos:');
    console.log('   1. Execute o SQL de migra√ß√£o (drizzle/001_init.sql) no Supabase');
    console.log('   2. Configure o storage (supabase_storage.sql)');
    console.log('   3. Comece a desenvolver!');
    
  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error);
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('   1. Verifique se DATABASE_URL est√° correto no .env');
    console.log('   2. Confirme que o projeto Supabase est√° ativo');
    console.log('   3. Verifique se executou o SQL de migra√ß√£o');
    process.exit(1);
  }

  process.exit(0);
}

main();
